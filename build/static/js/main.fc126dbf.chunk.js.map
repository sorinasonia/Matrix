{"version":3,"sources":["Asset/wheel.gif","Component/Home.js","Component/Login.js","Component/Recover.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setConfiguration","defaultScreenClass","gridColumns","Home","props","generateNumber","min","state","max","r","Math","floor","random","generateMatrixs","matrix","x","y","i","randomizedMatrix","push","setState","getMatrix","map","e","sm","className","this","src","wheel","alt","style","textDecoration","color","to","target","type","value","onClick","React","Component","Login","placeholder","Recover","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,mC,6MCK3CC,2BAAiB,CAAEC,mBAAoB,KAAMC,YAAa,K,IAsF3CC,E,kDAnFX,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,eAAiB,WACf,IAAIC,EAAM,EAAKC,MAAMD,IACjBE,EAAM,EAAKD,MAAMC,IAEfC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMF,EAAM,GAAKA,GACvD,MAAM,GAAN,OAAU,EAAIG,IAtBG,EAgCnBI,gBAAkB,WAKhB,IAJA,IAAMC,EAAS,EAAKP,MAAMQ,EAAI,EAAKR,MAAMS,EACrCC,EAAI,EACFC,EAAmB,GAEnBD,EAAEH,GACNI,EAAiBC,KAAK,EAAKd,kBAC3BY,IAGF,EAAKG,SAAS,CAAEN,OAAQI,KA1CP,EA6CnBG,UAAY,WACV,OAAO,EAAKd,MAAMO,OAAOQ,KAAI,SAAAC,GAAC,OAAG,kBAAC,MAAD,CAAKC,GAAI,GACxC,yBAAKC,UAAY,UACf,4BAAKF,SA9CT,EAAKhB,MAAQ,CACXO,OAAS,GACTC,EAAE,EACFC,EAAE,EACFV,IAAK,EACLE,IAAK,GAPU,E,gEAajBkB,KAAKb,oB,8BAaH,OAAO,yBAAKY,UAAY,QACpB,yBAAKE,IAAOC,IAAOC,IAAM,a,+BA0BrB,IAAD,OACP,OAEE,yBAAKJ,UAAU,cAEX,4BAAQA,UAAY,YAAW,kBAAC,IAAD,CAAMK,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SAAWC,GAAG,IAAIC,OAAO,IAAvE,QAA/B,KACF,kBAAC,YAAD,CAAWT,UAAY,OACrB,kBAAC,MAAD,KACI,uBAAMJ,UAAN,QAIJ,yBAAKI,UAAW,kBAEd,yBAAKA,UAAW,UACd,2BAAOA,UAAY,YAEjBU,KAAK,SAASC,MAAM,kBAAkBC,QAAS,WAAQ,EAAKxB,qBAC9D,uBAAMe,MAAN,OAGJ,oC,GA3EKU,IAAMC,W,QCiCVC,G,wDAlCf,WAAYpC,GAAO,uCACbA,G,qDAIE,OAEI,yBAAKqB,UAAY,SACb,yBAAKA,UAAY,OACb,wBAAIA,UAAY,UAAhB,SAEA,yBAAKA,UAAY,OAEb,qCAAKA,UAAY,SAAjB,YAAqC,SAArC,IAA+C,2BAAOU,KAAO,OAAOM,YAAc,qBAAlF,KACK,2BAAQN,KAAO,OAAOV,UAAY,WAAWgB,YAAc,aAE5D,4BAAQhB,UAAY,YAAa,kBAAC,IAAD,CAAMK,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SAC9EC,GAAG,QAAQC,OAAO,SADc,cAKjD,uBAAGT,UAAY,QAAf,yBAA6C,kBAAC,IAAD,CAAMQ,GAAK,WAAWC,OAAS,SAA/B,iBAA7C,W,GAvBQI,IAAMC,YCsCXG,E,kDApCb,WAAYtC,GAAO,uCACXA,G,qDAIN,OAGE,yBAAKqB,UAAY,WAEb,wBAAIA,UAAY,UAAhB,iBACF,yBAAKA,UAAY,QACf,wDAEA,yBAAKA,UAAY,OAEZ,2BAAOU,KAAO,SAASV,UAAY,UAAWgB,YAAc,YAC5D,2BAAON,KAAO,SAASV,UAAY,WAAYgB,YAAc,aAC7D,2BAAOhB,UAAY,aAAaU,KAAO,SAASM,YAAc,eAC9D,2BAAOhB,UAAY,qBAAqBU,KAAO,SAASM,YAAc,uBAErE,4BAAQhB,UAAY,YAAa,kBAAC,IAAD,CAAMK,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SAC7EC,GAAG,QAAQC,OAAO,SADa,cAIrC,uBAAGT,UAAY,QAAf,sBAA0C,kBAAC,IAAD,CAAMQ,GAAK,IAAIC,OAAS,UAAxB,cAA1C,W,GA3BUI,IAAMC,W,OC0BbI,MAtBf,WACI,OACI,kBAAC,IAAD,KACI,yBAAKlB,UAAY,OAEb,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOmB,KAAO,IAAIC,OAAK,EAACC,UAAaN,IACrC,kBAAC,IAAD,CAAOI,KAAO,QAAQE,UAAa3C,IACnC,kBAAC,IAAD,CAAOyC,KAAO,WAAWE,UAAaJ,QCLtCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc126dbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wheel.ad2a3986.gif\";","import React from \"react\";\nimport { Link } from 'react-router-dom'\nimport wheel from \"../Asset/wheel.gif\";\nimport { Container, Row, Col, setConfiguration} from 'react-grid-system';\n\nsetConfiguration({ defaultScreenClass: 'sm', gridColumns: 20 });\n\nclass Home extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        matrix : [],\n        x:5,\n        y:5,\n        min: 1,\n        max: 5,\n      };\n    }\n  \n     //One of the lifecycle of our app, this is the very first function that get called and we're initiailizing the matrix generation from here.\n    componentDidMount() {\n      this.generateMatrixs();\n    }\n\n     //here is where we're generating the random two numbers between 1 to 5 and appendind zero(0) at the end to give us a two digits number.\n    generateNumber = () => {  \n      var min = this.state.min;\n      var max = this.state.max;\n\n      const r = Math.floor(Math.random() * (max - min + 1) + min);\n      return `${0}${r}`;\n    }\n    \n    wheel() {\n        return <div className = \"onee\" > \n            <img src = {wheel} alt = \"wheel\"/>\n        </div>\n    }\n\n     //Here we're generating the column base on the x and y which determins the 5 / 5 matrix\n    generateMatrixs = () => {\n      const matrix = this.state.x * this.state.y;\n      var i = 0;\n      const randomizedMatrix = []\n\n      while(i<matrix){\n        randomizedMatrix.push(this.generateNumber());\n        i++;\n      }\n\n      this.setState({ matrix: randomizedMatrix});\n    }\n\n    getMatrix = () =>{\n      return this.state.matrix.map(e =><Col sm={4}>\n        <div className = \"matrix\">\n          <h1>{e}</h1>\n            </div>\n          </Col>);\n    }\n\n      render() {\n        return (\n          \n          <div className=\"generators\">\n\n              <button className = \"continue\"><Link style={{ textDecoration: 'none', color: 'white' }} to='/' target=''>back</Link> </button>\n            <Container className = \"con\" >\n              <Row>\n                  <this.getMatrix/>\n              </Row>\n            </Container>\n\n              <div className =\"inputContainer\" >\n              \n                <div className =\"inputs\">\n                  <input className = \"generator\"\n                  // style={{backgroundColor: 'crimson', color:'white', height: 60}}\n                    type=\"submit\" value=\"Generate Number\" onClick={() => { this.generateMatrixs() }}  />\n                  <this.wheel/>\n                </div>\n\n              <div> \n\n              </div>\n            </div>\n          </div>\n        );\n      }\n  }\n\nexport default Home;","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport \"../App.css\";\n\nclass Login extends React.Component {\n\nconstructor(props){\nsuper(props)\n}\n\n    render() {\n        return ( \n            /* This is the login form. it contains the Email, password and a login link to go to the next page. */\n            <div className = \"login\" > \n                <div className = \"box\" >\n                    <h1 className = \"loginn\" >LOGIN</h1>\n\n                    <div className = \"All\">\n                    \n                        <div className = \"email\" className = \"email\" > <input type = \"text\" placeholder = \"Username | Email\" /> </div> \n                             <input  type = \"text\" className = \"password\" placeholder = \"Password\" />  \n\n                            <button className = \"continue\"  ><Link style={{ textDecoration: 'none', color: 'white' }}\n                             to='/Home' target='Login'  > Login  </Link></button> \n\n                        </div>\n\n            <b className = \"bold\" > forgot your password <Link to = '/Recover' target = 'Login' > Click Here  </Link> </b>\n  \n                              \n                \n                </div>\n               \n            </div>\n      );\n    }\n\n\n}\n\nexport default Login;\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n// import 'reactjs-popup/dist/index.css';\n \nclass Recover extends React.Component {\n\n  constructor(props){\n    super(props)\n  }\n\n  render() {\n    return( \n\n      /* This is the login form. it contains the Email, password and a login link to go to the next page. */\n      <div className = \"Recover\" >\n\n          <h1 className = \"loginn\" >Random Matrix</h1>\n        <div className = \"boxx\" >\n          <h1  >  Recover your password </h1>\n\n          <div className = \"All\">\n                    \n               <input type = \" text \" className = \" Email \"  placeholder = \" Email \" /> \n               <input type = \" text \" className = \" Number \"  placeholder = \" Number \" /> \n               <input className = \" password \" type = \" text \" placeholder = \" Password \" />  \n               <input className = \" Comfirm Password \" type = \" text \" placeholder = \" Confirm Password \" />\n\n                <button className = \"continue\"  ><Link style={{ textDecoration: 'none', color: 'white' }}\n                  to='/Home' target='Login'  > Login  </Link></button> \n\n          </div>\n            <b className = \"bold\" > Remember password <Link to = '/' target = 'Signup' > Click Me </Link> </b>\n\n        </div>\n                    \n  \n      </div>\n    ); \n  }\n\n}\n\nexport default Recover;","import React from 'react';\nimport Home from \"./Component/Home\";\nimport Login from \"./Component/Login\";\nimport Recover from \"./Component/Recover\";\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport \"./App.css\";\n\n\nfunction App() {\n    return (\n        <Router>\n            <div className = \"App\" >\n              \n                <Switch> \n\n                    <Route path = \"/\" exact component = {Login} />\n                    <Route path = \"/Home\" component = {Home} />\n                    <Route path = \"/Recover\" component = {Recover} />\n\n                </Switch>\n            \n\n            </div>\n        </Router>\n    );\n\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}